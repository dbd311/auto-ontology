name: Ontology CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  ontology-validation:
    runs-on: ubuntu-latest
    container: 
      image: stain/jena
      options: --user root

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache bash python3 py3-pip python3-dev gcc musl-dev openjdk17-jre wget coreutils py3-pandas  

        # Download and install ROBOT
        wget https://github.com/ontodev/robot/releases/latest/download/robot.jar -O /usr/local/bin/robot.jar
        printf '#!/bin/sh\nexec java -jar /usr/local/bin/robot.jar "$@"\n' > /usr/local/bin/robot
        chmod +x /usr/local/bin/robot

        # Verify installation
        if ! robot --version; then
          echo "::error::ROBOT installation failed"
          exit 1
        fi

    - name: Merge ontology
      run: |
        if [ -f scripts/merge_ontology.sh ]; then
          chmod +x scripts/merge_ontology.sh
          ./scripts/merge_ontology.sh . automobile_merged.ttl || (echo "::error::Ontology merge failed"; exit 1)
          [ -f automobile_merged.ttl ] || (echo "::error::Merged ontology file not created"; exit 1)
        else
          echo "::error::Merge script not found at scripts/merge_ontology.sh"
          exit 1
        fi

    - name: Basic RDF validation
      run: |
        riot --validate automobile_merged.ttl || (echo "::error::RDF validation failed"; exit 1)

    - name: Run ROBOT report
      id: robot_report
      run: |
        mkdir -p validation-reports
        robot report --input automobile_merged.ttl \
          --format tsv \
          --output validation-reports/report.tsv || (echo "::warning::ROBOT report generation had issues"; exit 0)
        [ -f validation-reports/report.tsv ] || echo "::warning::No report.tsv generated"

    - name: Run ROBOT verify
      id: robot_verify
      run: |
        if [ -d sparql/validation_queries ] && [ -n "$(find sparql/validation_queries -maxdepth 1 -name '*.rq' -print -quit)" ]; then
          mkdir -p validation-reports/verify
          robot verify --input automobile_merged.ttl \
            --queries sparql/validation_queries/*.rq \
            --output-dir validation-reports/verify/ || (echo "::warning::ROBOT verify encountered issues"; exit 0)
        else
          echo "::notice::No validation queries found in sparql/validation_queries/"
        fi

    - name: Process validation results
      run: |
        echo "Validation artifacts:"
        find validation-reports -type f -print -exec cat {} \;

        if [ -s validation-reports/report.tsv ]; then
          python3 -c 'import pandas as pd, json; df = pd.read_csv("validation-reports/report.tsv", sep="\t"); df.to_json("validation-reports/report.json", orient="records")'
        else
          echo "::warning::No validation errors found, skipping JSON conversion."
        fi

    - name: Upload validation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: validation-artifacts
        path: |
          automobile_merged.ttl
          validation-reports/
        retention-days: 7

    - name: Check validation status
      if: ${{ steps.robot_validation.outcome == 'failure' }}
      run: |
        if [ -f validation-reports/report.tsv ]; then
          errors=$(grep -c "ERROR" validation-reports/report.tsv || echo 0)
          if (( errors > 0 )); then
            echo "::error::Validation failed with $errors errors"
            exit 1
          fi
        else
          echo "::error::No validation report generated"
          exit 1
        fi
